What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, you tell Git that you want to make that directory a repository
	so Git will install the .git folder with the necessary metadata.  You need to do it to add the
	required metadata to the directory / repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory because the staging area is where the files
	go that are going to be committed to the repository.  The value this offers is that you can work one
	many files and choose which to stage and commit so in the event that are you aren't fully finished with
	a file but need to make an emergency commit, you wont commit a file that is unfinished and keep it locally
	until a time when you can finish the code and commit that file.

How can you use the staging area to make sure you have one commit per logical
change?

	You can add files to the staging area of your choosing so you can logically group the same files in 
	the staging area to be committed even though other files were changed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are good for when you want to try experimental or major changes in your project that are
	different than the original project.  New designs, new UI, new core code, etc...

How do the diagrams help you visualize the branch structure?

	Diagrams help visualize by showing the reachability of commits in a graphical way.  This helps you 
	decide where to merge or which commits can reach other commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging the two branches is one master branch with the original files and the addition
	of the coin branch to make one unified branch. We represent it in the diagram the way we do because
	it is easier to visualize a master (main center line) branch with off-shooting branches of new code 
	that could be added later to the main branch by merging.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	The pros of Git's automatic merging is that it saves time to combine branches.  If you always do merges
	manually, you could potentially waste time.
